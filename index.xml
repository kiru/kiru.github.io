<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kiru.io</title>
    <link>https://kiru.io/</link>
    <description>Recent content on Kiru.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 25 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://kiru.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TIL 25.05.2021</title>
      <link>https://kiru.io/til/2021-05-25-tagged_templates/</link>
      <pubDate>Tue, 25 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2021-05-25-tagged_templates/</guid>
      <description>JavaScript supports template strings since ES2015:
const me = &amp;#34;Kiru&amp;#34; const missing = 22/7 - Math.PI console.log(`Print var: ${me}and ${missing}`) console.log(`This also works: ${22/7}- ${Math.PI}= ${missing}`) You can pass the tagged templates to functions:
function printTemplates(strings, ...keys) { console.log(&amp;#34;Strings: &amp;#34;, strings); console.log(&amp;#34;Keys&amp;#34;, keys); } printTemplates`What is possible: ${me}` Will print:
Strings: [&amp;quot;What is possible: &amp;quot;, &amp;quot;&amp;quot;, raw: Array(2)] Keys [&amp;quot;Kiru&amp;quot;] </description>
    </item>
    
    <item>
      <title>TIL 28.06.2020</title>
      <link>https://kiru.io/til/2020-06-28-multiselect/</link>
      <pubDate>Sun, 28 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2020-06-28-multiselect/</guid>
      <description>Having the following input:
&amp;lt;label for=&amp;quot;cars&amp;quot;&amp;gt;Make your choice:&amp;lt;/label&amp;gt; &amp;lt;select name=&amp;quot;choice&amp;quot; id=&amp;quot;choice&amp;quot; multiple&amp;gt; &amp;lt;option value=&amp;quot;Yes&amp;quot;&amp;gt;Volvo&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;quot;No&amp;quot;&amp;gt;Saab&amp;lt;/option&amp;gt; &amp;lt;option value=&amp;quot;Maybe&amp;quot;&amp;gt;Saab&amp;lt;/option&amp;gt; &amp;lt;/select&amp;gt; If nothing is selected, the name of the property is not sent to the server (e.g. if you expect the full set to be sent to the server)
A hack to fix this is to add a hidden property with the same name.
&amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;myitems&amp;quot; value=&amp;quot;&amp;quot; /&amp;gt; </description>
    </item>
    
    <item>
      <title>TIL 06.12.2019</title>
      <link>https://kiru.io/til/2019-12-06-java-comment-code/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2019-12-06-java-comment-code/</guid>
      <description>Nea trick to hide code inside comments by closing enclosing code using unicode:
public class Dafuq { /** * This does not do what you think it does. * &amp;lt;p&amp;gt; * You think code is documentation? No! Documentation is code! \u002a\u002f static { out.println(&amp;#34;No&amp;#34;); exit(0); } \u002f\u002a */ public static void main(String[] args) { out.println(&amp;#34;Yes&amp;#34;); } } The above code prints &amp;ldquo;NO&amp;rdquo;, and taken from here.
The above does only work for child processes (stared by the same shell).</description>
    </item>
    
    <item>
      <title>TIL 07.12.2019</title>
      <link>https://kiru.io/til/2019-12-07-new-javascript-features/</link>
      <pubDate>Thu, 05 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2019-12-07-new-javascript-features/</guid>
      <description>JavaScript functions have a toString() function which gives the source code a string.
let f = () =&amp;gt; { alert(&amp;#34;kiru.io&amp;#34;) } f.toString() Will emit
&amp;quot;() =&amp;gt; { alert(\&amp;quot;kiru.io\&amp;quot;) }&amp;quot; Learned from this resource.</description>
    </item>
    
    <item>
      <title>TIL 04.12.2019</title>
      <link>https://kiru.io/til/2019-12-04-pid/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2019-12-04-pid/</guid>
      <description>Until now, I did the following to wait for a process:
$ wait $pid The above does only work for child processes (stared by the same shell). The hack works for any processes:
$ tail --pid=$pid -f /dev/null Learned from to StackOverflow answer.</description>
    </item>
    
    <item>
      <title>TIL 05.11.2019</title>
      <link>https://kiru.io/til/2019-11-05-simulate-network-control/</link>
      <pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2019-11-05-simulate-network-control/</guid>
      <description>There is a tc command on Ubunut to manipulate traffic control settings, for example to introduce artificial packet dropping.
Add a packet delay of 100ms Â± 10ms with the current delay depending 25% on the last delay:
 tc qdisc change dev eth0 root netem delay 100ms 10ms 25%
 You can even configure more convoluted settings:
 sudo tc qdisc change dev lo root netem delay 50ms 200ms loss 10% 25% reorder 25% 50%</description>
    </item>
    
    <item>
      <title>TIL 22.10.2019</title>
      <link>https://kiru.io/til/2019-10-22-fswatch/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2019-10-22-fswatch/</guid>
      <description>fswatch tracks file system events. Execute a command on file change (taken from 1 as reference to search in the future):
fswatch -0 file.py | xargs -0 -I {} command Explanation:
  -O split record by NUL character
  xargs -O matches fswatch splitting
  -I run given command on each file changes
    How to Use fswatch&amp;#160;&amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>30Min.io</title>
      <link>https://kiru.io/projects/30min/</link>
      <pubDate>Tue, 11 Jun 2019 19:13:49 +0200</pubDate>
      
      <guid>https://kiru.io/projects/30min/</guid>
      <description>Objective </description>
    </item>
    
    <item>
      <title>TIL 17.05.2019</title>
      <link>https://kiru.io/til/2019-05-17-pipe-linux/</link>
      <pubDate>Fri, 17 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2019-05-17-pipe-linux/</guid>
      <description>This is a neat trick from this SO answer:
This :
 ./aaa.sh 2&amp;gt;&amp;amp;1 | tee -a log
 Can be shortened (bash v4.0+) to:
 ./aaa.sh |&amp;amp; tee -a log
 </description>
    </item>
    
    <item>
      <title>TIL 22.10.2018</title>
      <link>https://kiru.io/til/2018-10-22-bash/</link>
      <pubDate>Mon, 22 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2018-10-22-bash/</guid>
      <description>Mac OS X does always runs .bash_prfile intead of .bashrc 1. Simple test:
  Added: &amp;ldquo;echo &amp;ldquo;.bash_profile&amp;rdquo; to .bash_profile
  Added: &amp;ldquo;echo &amp;ldquo;.bashrc&amp;rdquo; to .bashrc
  Starting iTerm gives the following output:
.bash_profile .bashrc   Bash profile&amp;#160;&amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>TIL 30.03.2017</title>
      <link>https://kiru.io/til/2017-03-30-bash-shortcuts/</link>
      <pubDate>Thu, 30 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2017-03-30-bash-shortcuts/</guid>
      <description>New Shortcuts:
 CTRL+A Move cursor to start of the current line ( mnemnoic: Anfang) CTRL+K Delete from cursor to end of line ( mnemnoic: reverse of CTRL+U ) CTRL+Y Apparently bash has a cut-register ( like vim ): paste from cut-register  Bash ! commands:
After running the following command:
$ ls -lah data total 0 drwxr-xr-x 4 kiru staff 136B Mar 18 21:12 . drwxr-xr-x 43 kiru staff 1.</description>
    </item>
    
    <item>
      <title>TIL 29.03.2017</title>
      <link>https://kiru.io/til/2017-03-29-uri/</link>
      <pubDate>Wed, 29 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2017-03-29-uri/</guid>
      <description> Depends on the web server IIS is not case sensitive Apache is case sensitive 1    Are URIs case-insensitive?&amp;#160;&amp;#x21a9;&amp;#xfe0e;
   </description>
    </item>
    
    <item>
      <title>TIL 28.03.2017</title>
      <link>https://kiru.io/til/2017-03-28-sqllite/</link>
      <pubDate>Tue, 28 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2017-03-28-sqllite/</guid>
      <description>SQLite has only four column types: INTEGER, REAL, TEXT, BLOB SQLite columns are dynamically typed Date and Time is stored either as TEXT (ISO8601 strings), REAL (number of days) or INTEGER (unix timestamp)1 Each column has a preferred type1   A column with NUMERIC affinity may contain values using all five storage classes. When text data is inserted into a NUMERIC column, the storage class of the text is converted to INTEGER or REAL (in order of preference) if such conversion is lossless and reversible.</description>
    </item>
    
    <item>
      <title>TIL 27.03.2017</title>
      <link>https://kiru.io/til/2017-03-27-case/</link>
      <pubDate>Mon, 27 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2017-03-27-case/</guid>
      <description> this-is-called-kebab-case this_is_called_snake_case  </description>
    </item>
    
    <item>
      <title>TIL 14.03.2017</title>
      <link>https://kiru.io/til/2017-03-14-du/</link>
      <pubDate>Tue, 14 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2017-03-14-du/</guid>
      <description>df
 stands for Disk Free calculates file size based on the file system meta information if block size is 8kb and file size is only 1kb then file size for du is 8kb is faster but not accurate   du
 Disk Usage counts size used on the file system per file recursively (df and du giving different results) does not count open files does not rely on block size: 1kb file size with 8kb block size is still 1kb for du is slow, but more reliable  See this post from Mike Golvach for thorough explanation: Why DU And DF Display Different Values On Linux And Unix</description>
    </item>
    
    <item>
      <title>TIL 13.03.2017</title>
      <link>https://kiru.io/til/2017-03-13-java-and-oracle/</link>
      <pubDate>Mon, 13 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2017-03-13-java-and-oracle/</guid>
      <description>Java class with enum switch statement is translated to switch statement with ordinal:
public enum MyEnum { YES, NO; public static void main(String[] args) { MyEnum e = NO; switch (e) { // uses e.ordinal()  case YES: System.out.println(&amp;#34;Yes&amp;#34;); break; case NO: System.out.println(&amp;#34;No&amp;#34;); break; } } } You can use extract() in oracle in order to get the date parts
select extract(year from created_timestamp), extract(month from created_timestamp), extract(day from created_timestamp) from student; Source: [EXTRACT](https://docs.</description>
    </item>
    
    <item>
      <title>TIL 07.03.2017</title>
      <link>https://kiru.io/til/2017-03-07-binding/</link>
      <pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2017-03-07-binding/</guid>
      <description>binding 127.0.0.1 means listen to loopback interface
  Process bound to 127.0.0.1 can only be accessed by other programs from the same machine
  binding to 0.0.0.0 means listen to all interfaces ( e.g. all network interfaces connected to the machine )
  on Mac 27.0.0.1 /32 is bound to loopback
  on Windows 127.0.0.0 /8 is bound to loopback
  Source: [0.0.0.0 vs 127.</description>
    </item>
    
    <item>
      <title>TIL 05.03.2017</title>
      <link>https://kiru.io/til/2017-03-05-sms-length/</link>
      <pubDate>Sun, 05 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/til/2017-03-05-sms-length/</guid>
      <description> max SMS length is 1120 bit 7 bit per character used for the default alphabet, which means the maximum length is 160 characters ( 1120 / 7 ) 8 bit is used for data-messages ( e.g. images or sound messages ) 16 bit for the rest of the characters using Unicode encoding, meaning max 70 characters (Websms) Note: German Umlaut ( Ã¶, Ã¼, Ã¤ ) uses 16bit per characters Note: If one character needs to be encoded with 16bit then the whole message is encoded with 16bit  </description>
    </item>
    
    <item>
      <title>AdventOfSaaS 2021</title>
      <link>https://kiru.io/articles/adventofsaas2021/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/articles/adventofsaas2021/</guid>
      <description>18 / 25 days ð©ð©ð©ð©ð©ð©ð©ð©ð©ð©ð©ð©ð©ð©ð©ð©ð©ð©ð¨â¬â¬â¬â¬â¬â¬â¬â¬    FlashDictation            Table of content  Day 18: Production ready?   Day 17: Production   Day 16: Makeup Part 2   Day 15: Makeup Part 1   Day 14: Share dictations   Day 13: Add dictations   Day 12: Login works   Day 11: Login   Day 10: Navigation   Day 9: Landing Page for Mobile   Day 8: Landing Page   Day 7: First week done, goal for next week   Day 6: Easy solution for transcripts   Day 5: Issue transcripts   Day 4: Simple correction   Day 3: Add video player   Day 2: Define MVP   Day 1: Setup   Day 0: Launch AdventOfSaas 2021  AdventOfSaaS 2021  What is AdventOfSaaS?</description>
    </item>
    
    <item>
      <title>Unconventional Programming Tips: Comments</title>
      <link>https://kiru.io/articles/coding-comments/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kiru.io/articles/coding-comments/</guid>
      <description>Random thoughts on programming
I was recently reading Best Practices for writing code comments by Ellen Spertus. While there are some helpful tips, it misses the most important ones for me:
 Add &amp;ldquo;why&amp;rdquo; comments when you write the code. Add all the other comments when you read the code.   What is the main purpose of comments? They should help me understand the code easier. More than often, when I write the code, it is immediately clear what I was trying to solve.</description>
    </item>
    
  </channel>
</rss>
